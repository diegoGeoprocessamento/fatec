Gulp
Automatizador de tarefas com ferramentas que auxiliam o desenvolvimento.

Instalação
Com o node.js previamente instaldo, abrir o prompt de comando:
npm install -g Gulp
Com a instalação finalizada o gulp ficará dispoível no prompt de comando.

Verificar a versão
gulp -versão

Workflow com Gulp e LiveReload
Evita a utilização de um server como apache, e atualiza a página conforme as alterações
realizadas no documento.

1- Arquivo package.json
Dependências do projeto

2- Arquivo gulpfile.js 
Tasks básicas (server, arquivos e watch)

--- package.json ---
{
  "name": "modelo",
  "version": "0.0.1",
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-connect-multi": "^1.0.8"
  }
}
--- package.json ---

Acessar a pasta do proejto pelo prompt de comando e executar:
npm install
O coamando vai buscar as dependências do projeto e instalar as mesmas de uma pasta 
node_modules

--- gulpfile.js ---
var gulp = require('gulp'),
connect = require('gulp-connect-multi')();
  
gulp.task('arquivos', function(){
  gulp.src(['./src/**/**/*.*'])
  .pipe(gulp.dest('./build'))
  .pipe(connect.reload())
});
  
gulp.task('servidor', connect.server({
  root: ['build'],
  port: 1337,
  livereload: true,
  open: {
    browser: 'chrome'
  }
}));

gulp.task('watch', function(){
  gulp.watch(['src/**/**'], ['arquivos']);
});

gulp.task('default', ['arquivos', 'servidor', 'watch']);
--- package.json ---

A task arquivos pega TODO o conteúdo das pastas da /src (e 2 níveis de subpastas) e envia para ./build.
Termina com .pipe(connect.reload()) que forçará a atualização do navegador.

A task servidor cria um server com o connect, passando algumas opções, como a pasta-base, ativar liveReload e abrir com o chrome. 
Se usar OSX, coloque ‘Google Chrome’
A watch irá monitorar nossos arquivos e executar a task arquivos caso haja alguma alteração neles.
Por fim a task default para executar as 2 primeiras tasks e a task watch juntas.
