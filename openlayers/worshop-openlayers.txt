1- Após descompactar ir até o diretório e instalar as dependências adicionais:
npm install

Desta forma pode-se acessar o servidor do workshop
npm start

Este comando inicia o servdor de desenvolvimento onde pode-se ler a documentação e fazer
os exercícios:
http://localhost:3000

--- Criando um mapa ---
No openlayers um mapa é uma coleção de camdas e várias interações e controles.

mapa = marcação, declaração de estilo e código e inicialização.

--- Marcação HTML para o mapa ---

elemento DOM único:

<div id="map"></div>

este elemento servirá como contêiner para visualização do mapa.
Fornecendo um id para o elemento o mesmo pode ser referenciado como target do mapa.

--- Estilo do mapa ---

O openlayers vem com uma folha de estilo padrão que específica como os elementos relacionados
ao mapa devem ser exibidos.

<link rel="stylesheet" href="/ol.css" type="text/css">

O openlayers não atribui nenhum tamanho padrão para o mapa. Assim seguindo a folha de estilo é preciso
declarar o tamanho do mapa.

<link rel="stylesheet" href="/ol.css" type="text/css">
<style>
  #map {
    height: 256px;
    width: 512px;
  }
</style>

--- Inicialização do mapa ---

<script>
    var map = new ol.Map({
      target: 'map',
      layers: [
        new ol.layer.Tile({
          source: new ol.source.TileWMS({
            url: 'https://ahocevar.com/geoserver/wms',
            params: {LAYERS: 'nasa:bluemarble', TILED: true}
          })
        })
      ],
      view: new ol.View({
        projection: 'EPSG:4326',
        center: [0, 0],
        zoom: 0,
        maxResolution: 0.703125
      })
    });
</script>

Antes do script ser executado o openlayers deve ser carregado, o open layers é carregado no <head>
do documento com o elemento:
<script src="/loader.js"></script>

A inicialização do mapa no código não pode ser executada até que o elemento que servirá como 
contêiner (<div></div>) estar pronto. Incluindo o código na parte inferior do elemento <body>
é garantido que o código da biblioteca está carregado e que o contêiner está promto para receber
o mapa.

O script cria um novo objeto ol.Map com as opções de configuração:
target: 'map'

O id do contêiner é informado para o construtor do objeto identtificar onde o mapa deve ser 
renderizado. Poderia ser referenciado também de maneira direta como por exemplo: document.getElemetnById("map")

No trecho layers é configurado uma camada que será exibida no mapa:

layers: [
  new ol.layer.Tile({
    source: new ol.source.TileWMS({
      url: 'https://ahocevar.com/geoserver/wms',
      params: {LAYERS: 'nasa:bluemarble', TILED: true}
    })
  })
],

A visualização do mapa é uma coleção de camadas, e para ver uma mapa é preciso incluir ao menos
uma camada.

No final é definida a view, foi especificada uma projeção (projection), um centro (center) e 
um nível de zoom (zoom). Também foir fornecida a resolção máxima (maxResolution) para garantir
que não serão geradas requisições (bounding boxes) que o GeoWebCache não possa atender.

view: new ol.View({
    projection: 'EPSG:4326',
    center: [0, 0],
    zoom: 0,
    maxResolution: 0.703125
})

*** MAPA EXEMPLO *** O TUTORIAL ESTAVA COM PROBELMAS PARA LOCALIZAR OS ARQUIVOS CSS E JS ***
http://localhost:3000/map.html

<!doctype html>
<html lang="en">
  <head>
    <link rel="stylesheet" href="https://openlayers.org/en/v4.6.4/css/ol.css" type="text/css">
    <style>
      #map {
        height: 256px;
        width: 512px;
      }
    </style>
    <title>OpenLayers example</title>
    <script src="https://openlayers.org/en/v4.6.4/build/ol.js" type="text/javascript"></script>
  </head>
  <body>
    <h1>My Map</h1>
    <div id="map"></div>
    <script type="text/javascript">
      var map = new ol.Map({
        target: 'map',
        layers: [
          new ol.layer.Tile({
            title: 'Global Imagery',
            source: new ol.source.TileWMS({
              url: 'https://ahocevar.com/geoserver/wms',
              params: {LAYERS: 'nasa:bluemarble', TILED: true}
            })
          })
        ],
        view: new ol.View({
          projection: 'EPSG:4326',
          center: [0, 0],
          zoom: 0,
          maxResolution: 0.703125
        })
      });
    </script>
  </body>
</html>

*** Exemplos ***

http://openlayers.org/en/master/examples/

*** API ***

https://openlayers.org/en/latest/apidoc/

--- CAMADAS WMS ---

Quando adiconada uma camada no mapa a fonte de dados da camada é responsável por obter os
dados a serem exibidos. Podem ser requisistados dados tipo raster ou vetorial.
Dados raster são informações renderizadas pelo servidor em formato de imagem, um dado
vetorial é entregue pelo servidor como uma informação estruturada e pode ser renderizada pelo
cliente.

--- Criando uma camada ---

--- Construtor da classe ol.layer.Tile
Aceita como parâmetro um objeto literal do tipo ol.layer.TileOptions.
No exemplo foi passado a chave source por meio do objeto ol.source.TileWMS, a camada pode receber
um título legivel por meio da chave title.
No openlayers existe uma separação entre as camadas (layers) e as fontes de dados (sources).
ol.layer.Tile representa uma grade regular de imagens, ol.layer.Image representa uma única
imagem, dependendo do tipo da camada pode-se usar uma fonte de dados diferente.

--- Construtor da classe ol.sourceTileWMS
O url é o endereço do provedor WMS e params é o objeto literal com os nomes dos parâmtros layers
é requerido. o TILED:true é uma extensão epecífica do geoserver para melhorar o cache dos blocos (tiles)
gerados pelas camdas WMS.

*** Exemplo ***
Mudar o valor parâmetro LAYERS de 'nasa:bluemarble' para 'ne:NE1_HR_LC_SR_W_DR'

new ol.layer.Tile({
  title: 'Global Imagery',
  source: new ol.source.TileWMS({
    url: 'https://ahocevar.com/geoserver/wms',
    params: {LAYERS: 'ne:NE1_HR_LC_SR_W_DR', TILED: true}
  })
})

Mudar a camada (layer) e o source (fonte de dados) para ter uma imagem única ao invés de tiles.
Utilizando a aba network da ferramenta para desenvolvedores do navegador é posível checar se está sendo
retornardo um tile de 256x256 ou uma única imagem.

var map = new ol.Map({
  target: 'map',
  layers: [
    new ol.layer.Image({
      title: 'Global Imagery',
      source: new ol.source.ImageWMS({
        url: 'https://ahocevar.com/geoserver/wms',
        params: {LAYERS: 'nasa:bluemarble', TILED: true}
      })
    })
  ],
  view: new ol.View({
    projection: 'EPSG:4326',
    center: [0, 0],
    zoom: 0,
    maxResolution: 0.703125
  })
});

--- Tiles cacheados
Por padrão a camada Tile faz requisições para obter imagens de 256 x 256 pixels de modo a preencher a área
de visuzliação do mapa. Conforme você move ou faz zoom no mapa  mais requisições são disparadas
para preencher áreas que você ainda não visualizou, enquanto o navegador faz o cache de algumas imagens,
com esse tipo de cmada é possível para o servidor fazer o cache destas requisições e retornar o resultado cacheado
na próxima vez que visitar a mesma área, ocasionando assim uma melhora de desempenho.

--- ol.source.XYZ
A especificação WMS é muito flexível em termos do que um cliente pode requisitar. Sem restrições, isto faz com que seja muito
difícil fazer cache.
Um serviço pode oferecer tiles somente para níveis de zoom pré-determinados e somente para uma determinada grade. Isto pode ser
generalizado como uma camada tiled  como uma fonte de dados XYZ
XY indicam coluna e linha
Z nível de zoom.

--- ol.source.OSM
O projeto OpenStreetMap é um esforço apra coletar e disponibilizar gratuitamente dados geoespaciais para o mundo.
O projeto fornece diferentes renderizações de seus dados como conjuntos de tiles cacheados.
As renderizações estão em conformidade com o arranjo básico do grid XYZ e podem ser usadas num mapa, a fonte
ol.source.OSM acessa os tiles fornecidos pelo OpenStreetMap.

*** Exemplos ***
Trocar o script do arquivo anterior:

<script>
  var map = new ol.Map({
      target: 'map',
      layers: [
          new ol.layer.Tile({
              source: new ol.source.OSM()
          })
      ],
      view: new ol.View({
          center: ol.proj.fromLonLat([126.97, 37.56]),
          zoom: 9
      }),
      controls: ol.control.defaults({
          attributionOptions: {
              collapsible: false
          }
      })
  });
</script>

Trocar o style do arquivo anterior:

<style>
  #map {
      width: 512px;
      height: 256px;
  }
  .ol-attribution a {
      color: black;
  }
</style>

--- Detalhes das alterações ---

--- Projeções

view: new ol.View({
  center: ol.proj.fromLonLat([126.97, 37.56]),
  zoom: 9
})

O openlayers precisa saver o sistema de coordenadsa dos dados, internamente, isto é representado pelo objeto ol.proj.Projection 
mas também pode ser fornecida uma string.

Considerando que é mais fácil encontrar coordenads de um lugar de interesse em coordenadsa geográficas, foi utilizado o método
ol.proj.fromLonLat para converter coordenads geográficas WGS84 (EPSG:4326) para pseudo mercator WGS84 (EPSG:3857).
Os serviços de mapa online utlizam EPSG:3857 como padrão.

--- Projeções Alternativas ---
O openlayers inclui trnasformações entre sistemas de referência WGS84, por isso pode-se utilizar a função ol.proj.fromLonLat sem
qualquer problema, para trabalhar com dados de outras projeções é necessário apresentar infoarmações adicionais no documento,
por exemplo para utilizar o sistema de referência EPSG:21781, é necessário incluir duas tags no script da página:



    OpenLayers Workshop
    Introduction
    O Básico
        Criando um mapa
        Dissecando o seu mapa
        Recursos úteis
    Camadas e Fontes de Dados
        Fontes WMS
        Fontes de blocos de dados de imagem (tiles)
        Fornecedores proprietários de blocos de dados de imagem
        Dados vetoriais
        Fontes de imagens vetoriais
    Controles e Interações
        Controle ScaleLine
        Interação Select
        Interação Draw
        Interação Modify
    Tópicos sobre Vetores
        Formatos
        Estilos
        Personalização de estilos
    Builds Personalizados
        Conceitos
        Criar builds personalizados

Tiles cacheados

Por padrão, a camada Tile faz requisições para obter imagens de 256 x 256 pixels de modo a preencher a área de visualização do mapa. Conforme você move ou faz zoom no mapa, mais requisições são disparadas para preencher áreas que você ainda não visualizou. Enquanto seu navegador faz o cache de algumas imagens, muito processamento é normalmente exigido do servidor para renderizar imagens dinamicamente.

Como esse tipo de camada faz requisições de imagens numa grade regular, é possível para o servidor fazer cache dessas requisições e retornar o resultado cacheado na próxima vez que você (ou outra pessoa) visitar a mesma área - ocasionando uma melhora no desempenho.
ol.source.XYZ

A especificação WMS é muito flexível em termos do que um cliente pode requisitar. Sem restrições, isto faz com que seja muito difícil, ou até mesmo impossível, fazer cache.

No extremo oposto, um serviço pode oferecer tiles somente para níveis de zoom pré-determinados e somente para uma determinada grade. Isto pode ser generalizado como uma camada tiled com uma fonte de dados XYZ - você pode considerar X e Y para indicar a coluna e a linha da grade e Z para representar o nível de zoom.
ol.source.OSM

O projeto OpenStreetMap (OSM) é um esforço para coletar e disponibilizar gratuitamente dados geoespaciais para o mundo. O projeto fornece diferentes renderizações de seus dados como conjuntos de tiles cacheados. Estas renderizações estão em conformidade com o arranjo básico da grid XYZ e podem ser usadas num mapa OpenLayers. A fonte de dados ol.source.OSM acessa os tiles fornecidos pelo OpenStreetMap.
Tarefas

    Abra o arquivo map.html da seção anterior num editor de texto e mude o código de inicialização do mapa conforme abaixo:

     <script>
       var map = new ol.Map({
         target: 'map',
         layers: [
           new ol.layer.Tile({
             source: new ol.source.OSM()
           })
         ],
         view: new ol.View({
           center: ol.proj.fromLonLat([126.97, 37.56]),
           zoom: 9
         }),
         controls: ol.control.defaults({
           attributionOptions: {
             collapsible: false
           }
         })
       });
     </script>

    No <head> do mesmo documento, adicione algumas declarações de estilo para a camada:

     <style>
         #map {
             width: 512px;
             height: 256px;
         }
         .ol-attribution a {
             color: black;
         }
     </style>

    Salve suas alterações e atualize a página no seu navegador: http://localhost:3000/map.html
    Uma camada `tiled` com uma fonte OSM
    Uma camada `tiled` com uma fonte OSM

Olhando mais de perto
Projeções

Revise a definição de visualização do mapa:

  view: new ol.View({
    center: ol.proj.fromLonLat([126.97, 37.56]),
    zoom: 9
  })

Dados geoespaciais podem vir em qualquer sistema de coordenadas. Um conjunto de dados pode usar coordenadas geográficas (longitude e latitude) em graus e outro pode usar coordenadas numa projeção local com unidades em metros. Uma discussão completa sobre sistemas de coordenadas referenciais está fora do escopo deste módulo, mas é importante entender o conceito básico.

O OpenLayers precisa saber o sistema de coordenadas de seus dados. Internamente, isto é representado pelo objeto ol.proj.Projection mas também pode ser fornecida uma string.

Os tiles do OpenStreetMap que você utilizará está na projeção de Mercator. Por causa disso, nós precisamos atribuir o centro do mapa utilizando coordenadas desta projeção. Considerando que é relativamente fácil encontrar coordenadas de um lugar de interesse em coordenadas geográficas, nós usamos o método ol.proj.fromLonLat para converter coordenadas geográficas ('EPSG:4326') para coordenadas Mercator ('EPSG:3857').
Projeções alternativas

O OpenLayers inclui transformações entre sistemas de coordenadas geográficas ('EPSG:4326') e Web Mercator ('EPSG:3857'). Por isso, conseguimos utilizar a função ol.proj.fromLonLat sem qualquer esforço extra. Se você quiser trabalhar com dados em outras projeções, você precisará de algumas informações adicionais antes de usar as funções ol.proj.*.

Por exemplo, se quiser trabalhar com dados no sistema de coordenadas 'EPSG:21781', você precisa incluir duas tags de script em sua página:

<script src="http://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.6/proj4.js" type="text/javascript"></script>
<script src="http://epsg.io/21781-1753.js" type="text/javascript"></script>

Em seguida no código da aplicação deve-se registrar a projeção e atribuir sua extensão:

var projection = ol.proj.get('EPSG:21781');
projection.setExtent([485869.5728, 76443.1884, 837076.5648, 299941.7864]);

A extensão pode ser obtida no sguinte link:
http://epsg.io/

--- Criação da camada ---

layers: [
  new ol.layer.Tile({
    source: new ol.source.OSM()
  })
],

Array de layers do objeto de configuração do mapa.

--- Configuração do controle Attribution ---

Por padrão o controle ol.control.Attribution adiciona um botão i (informação) que po de ser pressionado para mostrar a informação de atribuição.
Para ficar em conformidade com os termos de uso do OpenStreetMap e sempre mostrar a informação de atribuição, é passa a opção para o 
construtor do objeto ol.Map:

controls: ol.control.defaults({
  attributionOptions: {
    collapsible: false
  }
})

Desta forma o botão i é removido e mantém a informação de atribuição sempre visível.

--- CAMADAS RASTER PROPRIETÁRIAS ---
As camadas anteriores estão em conformidade com o padrão WMS e um cache personalizado de tiles. Existem serviços de mapas online
que também fornecem serviços de tiles proprietários. O openlayers também fornece tipos de camadas que trabalham com esses serviços
proprietários por meio de suas APIs.

--- CAMADAS BING ---

Adicionar:

ol.source.BingMaps ({
  ImagerySet: 'Road'
  key: 'Bing Maps Key'
})

--- CAMADAS VETORIAIS ---
Camadas veoriais são repreentadas pela classe ol.layer.Vector e delegam para o cliente a renderizaçã dos dados.
O openlayers suporta uma renderização vetorial completa utilziando o canvas, mas somente geometrias do tipo ponto no WebGL.

--- EXEMPLO ---
Utilizar o exemplo WMS para gerar um mapa básico do mundo e adicionar geometrias sobre o mapa em uma camada vetorial.

Adicione outra camada depois da camada Tile:

new ol.layer.Vector({
  title: 'Earthquakes',
  source: new ol.source.Vector({
    url: '/data/layers/7day-M2.5.json',
    format: new ol.format.GeoJSON()
  }),
  style: new ol.style.Style({
    image: new ol.style.Circle({
      radius: 3,
      fill: new ol.style.Fill({color: 'white'})
    })
  })
})

Isto adiciona uma nova camada vetorial ao mapa, ela requisitará um conjunto de features armazenadas no formato GeoJSON.

A camda recebe o título Earthquakes e outras opções, dentre as opções é incluída a chava source do tipo ol.source.Vector que aponta para
a utrl e também é fornecido o formato (format) que será utilizado para fazer o parser dos dados.

*Para estilizar features em função de algum atributo, pode-se utilizar uma funçãi de estilo ao invés do ol.style.Style para a opção
style da classe ol.layer.Vector


